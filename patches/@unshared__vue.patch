diff --git a/dist/BaseButton.d.ts b/dist/BaseButton.d.ts
index 919596841f5e633ea0f2c13f678cc2882d27f048..2dd8744e732f961df46aab3f835909997089e239 100644
--- a/dist/BaseButton.d.ts
+++ b/dist/BaseButton.d.ts
@@ -11,10 +11,9 @@ import '@unshared/types';
 declare const BASE_BUTTON_PROPS: {
     label: (StringConstructor | NumberConstructor)[];
     as: Prop<unknown>;
-    error: Prop<unknown>;
-    onClick: Prop<unknown>;
     disabled: Prop<unknown>;
     "onUpdate:disabled": Prop<unknown>;
+    error: Prop<unknown>;
     "onUpdate:error": Prop<unknown>;
     loading: Prop<unknown>;
     "onUpdate:loading": Prop<unknown>;
@@ -25,6 +24,7 @@ declare const BASE_BUTTON_PROPS: {
     classLoading: Prop<unknown>;
     classReadonly: Prop<unknown>;
     eager: Prop<unknown>;
+    onClick: Prop<unknown>;
     classActive: {
         type: StringConstructor;
         default: string;
diff --git a/dist/BaseContentEditable.d.ts b/dist/BaseContentEditable.d.ts
index de22af6e5e768295fd6b087c2d96ddd7b3974aac..17f4ce116da2bd73c21044923a69716503ebfbfe 100644
--- a/dist/BaseContentEditable.d.ts
+++ b/dist/BaseContentEditable.d.ts
@@ -8,20 +8,20 @@ import '@unshared/types';
 /** The base props for the `BaseContentEditable` component. */
 declare const BASE_CONTENT_EDITABLE_PROPS: {
     disabled: BooleanConstructor;
-    error: (StringConstructor | ErrorConstructor)[];
+    error: (ErrorConstructor | StringConstructor)[];
     loading: BooleanConstructor[];
     readonly: BooleanConstructor[];
-    'onUpdate:disabled': (ArrayConstructor | FunctionConstructor)[];
-    'onUpdate:error': (ArrayConstructor | FunctionConstructor)[];
-    'onUpdate:loading': (ArrayConstructor | FunctionConstructor)[];
-    'onUpdate:readonly': (ArrayConstructor | FunctionConstructor)[];
+    'onUpdate:disabled': (FunctionConstructor | ArrayConstructor)[];
+    'onUpdate:error': (FunctionConstructor | ArrayConstructor)[];
+    'onUpdate:loading': (FunctionConstructor | ArrayConstructor)[];
+    'onUpdate:readonly': (FunctionConstructor | ArrayConstructor)[];
     classDisabled: StringConstructor;
     classError: StringConstructor;
     classLoading: StringConstructor;
     classReadonly: StringConstructor;
     as: Prop<unknown>;
     modelValue: {};
-    'onUpdate:modelValue': (ArrayConstructor | FunctionConstructor)[];
+    'onUpdate:modelValue': (FunctionConstructor | ArrayConstructor)[];
     parse: FunctionConstructor;
     serialize: FunctionConstructor;
 };
diff --git a/dist/BaseDialog.cjs b/dist/BaseDialog.cjs
index 37b0fb34213dccadfd990addd4387dd9a240309c..d8cbf60cb72ebe918554fa95ab7914f4c6c4005c 100644
--- a/dist/BaseDialog.cjs
+++ b/dist/BaseDialog.cjs
@@ -13,18 +13,21 @@ const BASE_DIALOG_PROPS = {
       "aria-modal": "true",
       "aria-hidden": isOpen.value,
       role: "dialog",
-      ref: element,
-      style: isOpen ? void 0 : { display: "none" }
+      ref: (value) => {
+        element.value = value;
+      }
     })), close = () => {
-      element.value.close(), isOpen.value = !1, emit("close");
+      element.value instanceof HTMLDialogElement && element.value.close(), isOpen.value = !1, emit("close");
     }, open = () => {
-      element.value.showModal(), isOpen.value = !0, emit("open");
+      element.value instanceof HTMLDialogElement && element.value.showModal(), isOpen.value = !0, emit("open");
     }, returnValue = (value) => {
-      emit("return", value), close(), element.value.returnValue = value;
+      emit("return", value), close(), element.value instanceof HTMLDialogElement && (element.value.returnValue = value);
     };
     vue.watch(isOpen, (value) => {
-      if (value && !element.value.open) return open();
-      if (!value && element.value.open) return close();
+      if (element.value instanceof HTMLDialogElement) {
+        if (value && !element.value.open) return open();
+        if (!value && element.value.open) return close();
+      }
     });
     const slotProps = vue.computed(() => ({
       isOpen: isOpen.value,
@@ -36,10 +39,11 @@ const BASE_DIALOG_PROPS = {
       is,
       isOpen,
       renderable
-    }), () => {
-      const vnodeDialog = vue.h("dialog", attributes.value, slots.dialog?.(slotProps.value));
-      return [slots.default?.(slotProps.value), vnodeDialog];
-    };
+    }), () => vue.h(
+      renderable.is ?? "dialog",
+      attributes.value,
+      slots.default?.(slotProps.value)
+    );
   },
   {
     name: "BaseDialog",
diff --git a/dist/BaseDialog.cjs.map b/dist/BaseDialog.cjs.map
index ea2b7d7a929d15e1a6a918fbe6ac0ab5cf48d3dc..794d36306f5bc060f67a2711b1fd1e704b42add5 100644
--- a/dist/BaseDialog.cjs.map
+++ b/dist/BaseDialog.cjs.map
@@ -1 +1 @@
-{"version":3,"file":"BaseDialog.cjs","sources":["../BaseDialog.ts"],"sourcesContent":["import type { Prop, VNode } from 'vue'\nimport type { DefineComponentContext } from './defineSetupComponent'\nimport type { BaseRenderableOptions } from './useBaseRenderable'\nimport { useVModel } from '@vueuse/core'\nimport { computed, h, mergeProps, ref, watch } from 'vue'\nimport { defineSetupComponent } from './defineSetupComponent'\nimport { exposeToDevtool } from './exposeToDevtool'\nimport { BASE_RENDERABLE_OPTIONS, useBaseRenderable } from './useBaseRenderable'\n\n/** The base props for the `BaseDialog` component. */\nexport const BASE_DIALOG_PROPS = {\n  ...BASE_RENDERABLE_OPTIONS,\n  'modelValue': Boolean,\n  'onUpdate:modelValue': [Function, Array],\n  'onClose': [Function, Array],\n  'onOpen': [Function, Array],\n  'onReturn': [Function, Array],\n} satisfies Record<keyof BaseDialogProps, Prop<unknown>>\n\n/** The properties & context of the `BaseDialog` component. */\nexport interface BaseDialogProps<T = unknown> extends BaseRenderableOptions {\n\n  /**\n   * The state of the dialog. If `true`, the dialog is visible. If `false`, the\n   * dialog is hidden.\n   */\n  modelValue?: boolean\n  'onUpdate:modelValue'?: (value: boolean) => void\n\n  /**\n   * The event emitted when the dialog is closed. This is used to notify the parent\n   * component that the dialog has been closed.\n   */\n  onClose?: () => void\n\n  /**\n   * The event emitted when the dialog is opened. This is used to notify the parent\n   * component that the dialog has been opened.\n   */\n  onOpen?: () => void\n\n  /**\n   * Event emitted when the dialog returns a value. This is used to notify the parent\n   * component that the dialog has returned a value.\n   */\n  onReturn?: (value: T) => void\n}\n\nexport interface BaseDialogSlotProps<T = unknown> {\n\n  /** Close and return a value from the dialog. */\n  returnValue: (value: T) => void\n\n  /** Close the dialog. */\n  close(): void\n\n  /** Open the dialog. */\n  open(): void\n\n  /** The state of the dialog. */\n  isOpen: boolean\n}\n\n/** The context of the `BaseDialog` component. */\n// eslint-disable-next-line @typescript-eslint/consistent-type-definitions\nexport type BaseDialogSlots<T = unknown> = {\n  default: (props: BaseDialogSlotProps<T>) => VNode\n  dialog: (props: BaseDialogSlotProps<T>) => VNode\n}\n\nexport const BaseDialog = /* #__PURE__ */ defineSetupComponent(\n  <T>(props: BaseDialogProps<T>, { attrs, slots, emit }: DefineComponentContext<BaseDialogSlots<T>>) => {\n    const renderable = useBaseRenderable(props)\n    const element = ref<HTMLDialogElement>()\n    const is = computed(() => renderable.is ?? 'dialog')\n    const isOpen = useVModel(props, 'modelValue', emit, { passive: true, defaultValue: false })\n\n    // --- Build the attributes.\n    const attributes = computed(() => mergeProps(attrs, {\n      'aria-modal': 'true',\n      'aria-hidden': isOpen.value,\n      'role': 'dialog',\n      'ref': element,\n      'style': isOpen ? undefined : { display: 'none' },\n    }))\n\n    /**\n     * Close the dialog and emit the `close` event. This is used to close the dialog\n     * when the user clicks outside of the dialog or presses the escape key.\n     */\n    const close = () => {\n      element.value!.close()\n      isOpen.value = false\n      emit('close')\n    }\n\n    /**\n     * Open the dialog and emit the `open` event. This is used to open the dialog\n     * when the user clicks on the button that opens the dialog.\n     */\n    const open = () => {\n      element.value!.showModal()\n      isOpen.value = true\n      emit('open')\n    }\n\n    /**\n     * Return a value from the dialog and emit the `return` event. This is used to\n     * return a value from the dialog to the parent component.\n     *\n     * @param value The value to return from the dialog.\n     */\n    const returnValue = (value: string) => {\n      emit('return', value)\n      close()\n      element.value!.returnValue = value\n    }\n\n    // --- Observe the model value and update the dialog state.\n    watch(isOpen, (value) => {\n      if (value && !element.value!.open) return open()\n      if (!value && element.value!.open) return close()\n    })\n\n    // --- Build the slot properties.\n    const slotProps = computed(() => ({\n      isOpen: isOpen.value!,\n      returnValue,\n      close,\n      open,\n    }) as BaseDialogSlotProps<T>)\n\n    // --- Expose properties.\n    exposeToDevtool({\n      is,\n      isOpen,\n      renderable,\n    })\n\n    // --- Return virtual DOM node.\n    return () => {\n      const vnodeDialog = h('dialog', attributes.value, slots.dialog?.(slotProps.value))\n      const vnodeDefault = slots.default?.(slotProps.value)\n      return [vnodeDefault, vnodeDialog]\n    }\n  },\n  {\n    name: 'BaseDialog',\n    props: BASE_DIALOG_PROPS,\n    inheritAttrs: false,\n  },\n)\n"],"names":["BASE_RENDERABLE_OPTIONS","defineSetupComponent","useBaseRenderable","ref","computed","useVModel","mergeProps","watch","exposeToDevtool","h"],"mappings":";;AAUO,MAAM,oBAAoB;AAAA,EAC/B,GAAGA,kBAAA;AAAA,EACH,YAAc;AAAA,EACd,uBAAuB,CAAC,UAAU,KAAK;AAAA,EACvC,SAAW,CAAC,UAAU,KAAK;AAAA,EAC3B,QAAU,CAAC,UAAU,KAAK;AAAA,EAC1B,UAAY,CAAC,UAAU,KAAK;AAC9B,GAqDa,aAA6BC,qCAAA;AAAA,EACxC,CAAI,OAA2B,EAAE,OAAO,OAAO,WAAuD;AACpG,UAAM,aAAaC,kBAAA,kBAAkB,KAAK,GACpC,UAAUC,IAAAA,IACV,GAAA,KAAKC,IAAAA,SAAS,MAAM,WAAW,MAAM,QAAQ,GAC7C,SAASC,KAAAA,UAAU,OAAO,cAAc,MAAM,EAAE,SAAS,IAAM,cAAc,GAAM,CAAC,GAGpF,aAAaD,IAAS,SAAA,MAAME,IAAAA,WAAW,OAAO;AAAA,MAClD,cAAc;AAAA,MACd,eAAe,OAAO;AAAA,MACtB,MAAQ;AAAA,MACR,KAAO;AAAA,MACP,OAAS,SAAS,SAAY,EAAE,SAAS,OAAO;AAAA,IAAA,CACjD,CAAC,GAMI,QAAQ,MAAM;AAClB,cAAQ,MAAO,SACf,OAAO,QAAQ,IACf,KAAK,OAAO;AAAA,IACd,GAMM,OAAO,MAAM;AACjB,cAAQ,MAAO,aACf,OAAO,QAAQ,IACf,KAAK,MAAM;AAAA,IAAA,GASP,cAAc,CAAC,UAAkB;AACrC,WAAK,UAAU,KAAK,GACpB,MACA,GAAA,QAAQ,MAAO,cAAc;AAAA,IAC/B;AAGMC,cAAA,QAAQ,CAAC,UAAU;AACvB,UAAI,SAAS,CAAC,QAAQ,MAAO,aAAa,KAAK;AAC/C,UAAI,CAAC,SAAS,QAAQ,MAAO,aAAa,MAAM;AAAA,IAAA,CACjD;AAGK,UAAA,YAAYH,IAAAA,SAAS,OAAO;AAAA,MAChC,QAAQ,OAAO;AAAA,MACf;AAAA,MACA;AAAA,MACA;AAAA,IAAA,EAC0B;AAGZ,WAAAI,gCAAA;AAAA,MACd;AAAA,MACA;AAAA,MACA;AAAA,IACD,CAAA,GAGM,MAAM;AACL,YAAA,cAAcC,MAAE,UAAU,WAAW,OAAO,MAAM,SAAS,UAAU,KAAK,CAAC;AAEjF,aAAO,CADc,MAAM,UAAU,UAAU,KAAK,GAC9B,WAAW;AAAA,IACnC;AAAA,EACF;AAAA,EACA;AAAA,IACE,MAAM;AAAA,IACN,OAAO;AAAA,IACP,cAAc;AAAA,EAAA;AAElB;;;"}
\ No newline at end of file
+{"version":3,"file":"BaseDialog.cjs","sources":["../BaseDialog.ts"],"sourcesContent":["import type { Prop, VNode } from 'vue'\nimport type { DefineComponentContext } from './defineSetupComponent'\nimport type { BaseRenderableOptions } from './useBaseRenderable'\nimport { useVModel } from '@vueuse/core'\nimport { computed, h, mergeProps, ref, watch } from 'vue'\nimport { defineSetupComponent } from './defineSetupComponent'\nimport { exposeToDevtool } from './exposeToDevtool'\nimport { BASE_RENDERABLE_OPTIONS, useBaseRenderable } from './useBaseRenderable'\n\n/** The base props for the `BaseDialog` component. */\nexport const BASE_DIALOG_PROPS = {\n  ...BASE_RENDERABLE_OPTIONS,\n  'modelValue': Boolean,\n  'onUpdate:modelValue': [Function, Array],\n  'onClose': [Function, Array],\n  'onOpen': [Function, Array],\n  'onReturn': [Function, Array],\n} satisfies Record<keyof BaseDialogProps, Prop<unknown>>\n\n/** The properties & context of the `BaseDialog` component. */\nexport interface BaseDialogProps<T = unknown> extends BaseRenderableOptions {\n\n  /**\n   * The state of the dialog. If `true`, the dialog is visible. If `false`, the\n   * dialog is hidden.\n   */\n  modelValue?: boolean\n  'onUpdate:modelValue'?: (value: boolean) => void\n\n  /**\n   * The event emitted when the dialog is closed. This is used to notify the parent\n   * component that the dialog has been closed.\n   */\n  onClose?: () => void\n\n  /**\n   * The event emitted when the dialog is opened. This is used to notify the parent\n   * component that the dialog has been opened.\n   */\n  onOpen?: () => void\n\n  /**\n   * Event emitted when the dialog returns a value. This is used to notify the parent\n   * component that the dialog has returned a value.\n   */\n  onReturn?: (value: T) => void\n}\n\nexport interface BaseDialogSlotProps<T = unknown> {\n\n  /** Close and return a value from the dialog. */\n  returnValue: (value: T) => void\n\n  /** Close the dialog. */\n  close(): void\n\n  /** Open the dialog. */\n  open(): void\n\n  /** The state of the dialog. */\n  isOpen: boolean\n}\n\n/** The context of the `BaseDialog` component. */\n// eslint-disable-next-line @typescript-eslint/consistent-type-definitions\nexport type BaseDialogSlots<T = unknown> = {\n  default: (props: BaseDialogSlotProps<T>) => VNode\n}\n\nexport const BaseDialog = /* #__PURE__ */ defineSetupComponent(\n  <T>(props: BaseDialogProps<T>, { attrs, slots, emit }: DefineComponentContext<BaseDialogSlots<T>>) => {\n    const renderable = useBaseRenderable(props)\n    const element = ref<HTMLElement>()\n    const is = computed(() => renderable.is ?? 'dialog')\n    const isOpen = useVModel(props, 'modelValue', emit, { passive: true, defaultValue: false })\n\n    // --- Build the attributes.\n    const attributes = computed(() => mergeProps(attrs, {\n      'aria-modal': 'true',\n      'aria-hidden': isOpen.value,\n      'role': 'dialog',\n      'ref': (value) => { element.value = value as HTMLElement },\n    }))\n\n    /**\n     * Close the dialog and emit the `close` event. This is used to close the dialog\n     * when the user clicks outside of the dialog or presses the escape key.\n     */\n    const close = () => {\n      if (element.value instanceof HTMLDialogElement)\n        element.value.close()\n      isOpen.value = false\n      emit('close')\n    }\n\n    /**\n     * Open the dialog and emit the `open` event. This is used to open the dialog\n     * when the user clicks on the button that opens the dialog.\n     */\n    const open = () => {\n      if (element.value instanceof HTMLDialogElement)\n        element.value.showModal()\n      isOpen.value = true\n      emit('open')\n    }\n\n    /**\n     * Return a value from the dialog and emit the `return` event. This is used to\n     * return a value from the dialog to the parent component.\n     *\n     * @param value The value to return from the dialog.\n     */\n    const returnValue = (value: string) => {\n      emit('return', value)\n      close()\n      if (element.value instanceof HTMLDialogElement)\n        element.value.returnValue = value\n    }\n\n    // --- Observe the model value and update the dialog state.\n    watch(isOpen, (value) => {\n      if (element.value instanceof HTMLDialogElement === false) return\n      if (value && !element.value.open) return open()\n      if (!value && element.value.open) return close()\n    })\n\n    // --- Build the slot properties.\n    const slotProps = computed(() => ({\n      isOpen: isOpen.value!,\n      returnValue,\n      close,\n      open,\n    }) as BaseDialogSlotProps<T>)\n\n    // --- Expose properties.\n    exposeToDevtool({\n      is,\n      isOpen,\n      renderable,\n    })\n\n    // --- Return virtual DOM node.\n    return () => h(\n      renderable.is ?? 'dialog',\n      attributes.value,\n      slots.default?.(slotProps.value),\n    )\n  },\n  {\n    name: 'BaseDialog',\n    props: BASE_DIALOG_PROPS,\n    inheritAttrs: false,\n  },\n)\n"],"names":["BASE_RENDERABLE_OPTIONS","defineSetupComponent","useBaseRenderable","ref","computed","useVModel","mergeProps","watch","exposeToDevtool","h"],"mappings":";;AAUO,MAAM,oBAAoB;AAAA,EAC/B,GAAGA,kBAAA;AAAA,EACH,YAAc;AAAA,EACd,uBAAuB,CAAC,UAAU,KAAK;AAAA,EACvC,SAAW,CAAC,UAAU,KAAK;AAAA,EAC3B,QAAU,CAAC,UAAU,KAAK;AAAA,EAC1B,UAAY,CAAC,UAAU,KAAK;AAC9B,GAoDa,aAA6BC,qCAAA;AAAA,EACxC,CAAI,OAA2B,EAAE,OAAO,OAAO,WAAuD;AACpG,UAAM,aAAaC,kBAAA,kBAAkB,KAAK,GACpC,UAAUC,IAAAA,IACV,GAAA,KAAKC,IAAAA,SAAS,MAAM,WAAW,MAAM,QAAQ,GAC7C,SAASC,KAAAA,UAAU,OAAO,cAAc,MAAM,EAAE,SAAS,IAAM,cAAc,GAAM,CAAC,GAGpF,aAAaD,IAAS,SAAA,MAAME,IAAAA,WAAW,OAAO;AAAA,MAClD,cAAc;AAAA,MACd,eAAe,OAAO;AAAA,MACtB,MAAQ;AAAA,MACR,KAAO,CAAC,UAAU;AAAE,gBAAQ,QAAQ;AAAA,MAAA;AAAA,IAAqB,CAC1D,CAAC,GAMI,QAAQ,MAAM;AACd,cAAQ,iBAAiB,qBAC3B,QAAQ,MAAM,SAChB,OAAO,QAAQ,IACf,KAAK,OAAO;AAAA,IACd,GAMM,OAAO,MAAM;AACb,cAAQ,iBAAiB,qBAC3B,QAAQ,MAAM,aAChB,OAAO,QAAQ,IACf,KAAK,MAAM;AAAA,IAAA,GASP,cAAc,CAAC,UAAkB;AAChC,WAAA,UAAU,KAAK,GACpB,MAAM,GACF,QAAQ,iBAAiB,sBAC3B,QAAQ,MAAM,cAAc;AAAA,IAChC;AAGMC,cAAA,QAAQ,CAAC,UAAU;AACnB,UAAA,QAAQ,iBAAiB,mBAC7B;AAAA,YAAI,SAAS,CAAC,QAAQ,MAAM,aAAa,KAAK;AAC9C,YAAI,CAAC,SAAS,QAAQ,MAAM,aAAa,MAAM;AAAA,MAAA;AAAA,IAAA,CAChD;AAGK,UAAA,YAAYH,IAAAA,SAAS,OAAO;AAAA,MAChC,QAAQ,OAAO;AAAA,MACf;AAAA,MACA;AAAA,MACA;AAAA,IAAA,EAC0B;AAGZ,WAAAI,gCAAA;AAAA,MACd;AAAA,MACA;AAAA,MACA;AAAA,IACD,CAAA,GAGM,MAAMC,IAAA;AAAA,MACX,WAAW,MAAM;AAAA,MACjB,WAAW;AAAA,MACX,MAAM,UAAU,UAAU,KAAK;AAAA,IACjC;AAAA,EACF;AAAA,EACA;AAAA,IACE,MAAM;AAAA,IACN,OAAO;AAAA,IACP,cAAc;AAAA,EAAA;AAElB;;;"}
\ No newline at end of file
diff --git a/dist/BaseDialog.d.ts b/dist/BaseDialog.d.ts
index 09e39fda464c61168bf068d2cfc424864b9b5ba7..943965c7620abc32d30a2a4961f06c23fc249007 100644
--- a/dist/BaseDialog.d.ts
+++ b/dist/BaseDialog.d.ts
@@ -6,10 +6,10 @@ import '@unshared/types';
 /** The base props for the `BaseDialog` component. */
 declare const BASE_DIALOG_PROPS: {
     modelValue: BooleanConstructor;
-    'onUpdate:modelValue': (ArrayConstructor | FunctionConstructor)[];
-    onClose: (ArrayConstructor | FunctionConstructor)[];
-    onOpen: (ArrayConstructor | FunctionConstructor)[];
-    onReturn: (ArrayConstructor | FunctionConstructor)[];
+    'onUpdate:modelValue': (FunctionConstructor | ArrayConstructor)[];
+    onClose: (FunctionConstructor | ArrayConstructor)[];
+    onOpen: (FunctionConstructor | ArrayConstructor)[];
+    onReturn: (FunctionConstructor | ArrayConstructor)[];
     as: Prop<unknown>;
 };
 /** The properties & context of the `BaseDialog` component. */
@@ -49,11 +49,9 @@ interface BaseDialogSlotProps<T = unknown> {
 /** The context of the `BaseDialog` component. */
 type BaseDialogSlots<T = unknown> = {
     default: (props: BaseDialogSlotProps<T>) => VNode;
-    dialog: (props: BaseDialogSlotProps<T>) => VNode;
 };
 declare const BaseDialog: new <T>(props: BaseDialogProps<T> & {} & vue.VNodeProps & vue.AllowedComponentProps & vue.ComponentCustomProps) => vue.CreateComponentPublicInstanceWithMixins<BaseDialogProps<T> & {}, {}, {}, {}, {}, vue.ComponentOptionsMixin, vue.ComponentOptionsMixin, [], vue.PublicProps, {}, false, {}, vue.SlotsType<{
     default?: (props: BaseDialogSlotProps<T>) => VNode;
-    dialog?: (props: BaseDialogSlotProps<T>) => VNode;
 }>, {}, {}, string, {}, any, vue.ComponentProvideOptions, {
     P: {};
     B: {};
diff --git a/dist/BaseDialog.js b/dist/BaseDialog.js
index b39ff1150db508928f238e686a3b32ef3da2e038..90b37bd256a1f3accac25e5b20f5391f122cae69 100644
--- a/dist/BaseDialog.js
+++ b/dist/BaseDialog.js
@@ -16,18 +16,21 @@ const BASE_DIALOG_PROPS = {
       "aria-modal": "true",
       "aria-hidden": isOpen.value,
       role: "dialog",
-      ref: element,
-      style: isOpen ? void 0 : { display: "none" }
+      ref: (value) => {
+        element.value = value;
+      }
     })), close = () => {
-      element.value.close(), isOpen.value = !1, emit("close");
+      element.value instanceof HTMLDialogElement && element.value.close(), isOpen.value = !1, emit("close");
     }, open = () => {
-      element.value.showModal(), isOpen.value = !0, emit("open");
+      element.value instanceof HTMLDialogElement && element.value.showModal(), isOpen.value = !0, emit("open");
     }, returnValue = (value) => {
-      emit("return", value), close(), element.value.returnValue = value;
+      emit("return", value), close(), element.value instanceof HTMLDialogElement && (element.value.returnValue = value);
     };
     watch(isOpen, (value) => {
-      if (value && !element.value.open) return open();
-      if (!value && element.value.open) return close();
+      if (element.value instanceof HTMLDialogElement) {
+        if (value && !element.value.open) return open();
+        if (!value && element.value.open) return close();
+      }
     });
     const slotProps = computed(() => ({
       isOpen: isOpen.value,
@@ -39,10 +42,11 @@ const BASE_DIALOG_PROPS = {
       is,
       isOpen,
       renderable
-    }), () => {
-      const vnodeDialog = h("dialog", attributes.value, slots.dialog?.(slotProps.value));
-      return [slots.default?.(slotProps.value), vnodeDialog];
-    };
+    }), () => h(
+      renderable.is ?? "dialog",
+      attributes.value,
+      slots.default?.(slotProps.value)
+    );
   },
   {
     name: "BaseDialog",
diff --git a/dist/BaseDialog.js.map b/dist/BaseDialog.js.map
index a9efbe2c163f7ea861a717774d3575be68fd7518..befc69ccefd9d2c818ba11a9a4afe9348c3b753f 100644
--- a/dist/BaseDialog.js.map
+++ b/dist/BaseDialog.js.map
@@ -1 +1 @@
-{"version":3,"file":"BaseDialog.js","sources":["../BaseDialog.ts"],"sourcesContent":["import type { Prop, VNode } from 'vue'\nimport type { DefineComponentContext } from './defineSetupComponent'\nimport type { BaseRenderableOptions } from './useBaseRenderable'\nimport { useVModel } from '@vueuse/core'\nimport { computed, h, mergeProps, ref, watch } from 'vue'\nimport { defineSetupComponent } from './defineSetupComponent'\nimport { exposeToDevtool } from './exposeToDevtool'\nimport { BASE_RENDERABLE_OPTIONS, useBaseRenderable } from './useBaseRenderable'\n\n/** The base props for the `BaseDialog` component. */\nexport const BASE_DIALOG_PROPS = {\n  ...BASE_RENDERABLE_OPTIONS,\n  'modelValue': Boolean,\n  'onUpdate:modelValue': [Function, Array],\n  'onClose': [Function, Array],\n  'onOpen': [Function, Array],\n  'onReturn': [Function, Array],\n} satisfies Record<keyof BaseDialogProps, Prop<unknown>>\n\n/** The properties & context of the `BaseDialog` component. */\nexport interface BaseDialogProps<T = unknown> extends BaseRenderableOptions {\n\n  /**\n   * The state of the dialog. If `true`, the dialog is visible. If `false`, the\n   * dialog is hidden.\n   */\n  modelValue?: boolean\n  'onUpdate:modelValue'?: (value: boolean) => void\n\n  /**\n   * The event emitted when the dialog is closed. This is used to notify the parent\n   * component that the dialog has been closed.\n   */\n  onClose?: () => void\n\n  /**\n   * The event emitted when the dialog is opened. This is used to notify the parent\n   * component that the dialog has been opened.\n   */\n  onOpen?: () => void\n\n  /**\n   * Event emitted when the dialog returns a value. This is used to notify the parent\n   * component that the dialog has returned a value.\n   */\n  onReturn?: (value: T) => void\n}\n\nexport interface BaseDialogSlotProps<T = unknown> {\n\n  /** Close and return a value from the dialog. */\n  returnValue: (value: T) => void\n\n  /** Close the dialog. */\n  close(): void\n\n  /** Open the dialog. */\n  open(): void\n\n  /** The state of the dialog. */\n  isOpen: boolean\n}\n\n/** The context of the `BaseDialog` component. */\n// eslint-disable-next-line @typescript-eslint/consistent-type-definitions\nexport type BaseDialogSlots<T = unknown> = {\n  default: (props: BaseDialogSlotProps<T>) => VNode\n  dialog: (props: BaseDialogSlotProps<T>) => VNode\n}\n\nexport const BaseDialog = /* #__PURE__ */ defineSetupComponent(\n  <T>(props: BaseDialogProps<T>, { attrs, slots, emit }: DefineComponentContext<BaseDialogSlots<T>>) => {\n    const renderable = useBaseRenderable(props)\n    const element = ref<HTMLDialogElement>()\n    const is = computed(() => renderable.is ?? 'dialog')\n    const isOpen = useVModel(props, 'modelValue', emit, { passive: true, defaultValue: false })\n\n    // --- Build the attributes.\n    const attributes = computed(() => mergeProps(attrs, {\n      'aria-modal': 'true',\n      'aria-hidden': isOpen.value,\n      'role': 'dialog',\n      'ref': element,\n      'style': isOpen ? undefined : { display: 'none' },\n    }))\n\n    /**\n     * Close the dialog and emit the `close` event. This is used to close the dialog\n     * when the user clicks outside of the dialog or presses the escape key.\n     */\n    const close = () => {\n      element.value!.close()\n      isOpen.value = false\n      emit('close')\n    }\n\n    /**\n     * Open the dialog and emit the `open` event. This is used to open the dialog\n     * when the user clicks on the button that opens the dialog.\n     */\n    const open = () => {\n      element.value!.showModal()\n      isOpen.value = true\n      emit('open')\n    }\n\n    /**\n     * Return a value from the dialog and emit the `return` event. This is used to\n     * return a value from the dialog to the parent component.\n     *\n     * @param value The value to return from the dialog.\n     */\n    const returnValue = (value: string) => {\n      emit('return', value)\n      close()\n      element.value!.returnValue = value\n    }\n\n    // --- Observe the model value and update the dialog state.\n    watch(isOpen, (value) => {\n      if (value && !element.value!.open) return open()\n      if (!value && element.value!.open) return close()\n    })\n\n    // --- Build the slot properties.\n    const slotProps = computed(() => ({\n      isOpen: isOpen.value!,\n      returnValue,\n      close,\n      open,\n    }) as BaseDialogSlotProps<T>)\n\n    // --- Expose properties.\n    exposeToDevtool({\n      is,\n      isOpen,\n      renderable,\n    })\n\n    // --- Return virtual DOM node.\n    return () => {\n      const vnodeDialog = h('dialog', attributes.value, slots.dialog?.(slotProps.value))\n      const vnodeDefault = slots.default?.(slotProps.value)\n      return [vnodeDefault, vnodeDialog]\n    }\n  },\n  {\n    name: 'BaseDialog',\n    props: BASE_DIALOG_PROPS,\n    inheritAttrs: false,\n  },\n)\n"],"names":[],"mappings":";;;;;AAUO,MAAM,oBAAoB;AAAA,EAC/B,GAAG;AAAA,EACH,YAAc;AAAA,EACd,uBAAuB,CAAC,UAAU,KAAK;AAAA,EACvC,SAAW,CAAC,UAAU,KAAK;AAAA,EAC3B,QAAU,CAAC,UAAU,KAAK;AAAA,EAC1B,UAAY,CAAC,UAAU,KAAK;AAC9B,GAqDa,aAA6B;AAAA,EACxC,CAAI,OAA2B,EAAE,OAAO,OAAO,WAAuD;AACpG,UAAM,aAAa,kBAAkB,KAAK,GACpC,UAAU,IACV,GAAA,KAAK,SAAS,MAAM,WAAW,MAAM,QAAQ,GAC7C,SAAS,UAAU,OAAO,cAAc,MAAM,EAAE,SAAS,IAAM,cAAc,GAAM,CAAC,GAGpF,aAAa,SAAS,MAAM,WAAW,OAAO;AAAA,MAClD,cAAc;AAAA,MACd,eAAe,OAAO;AAAA,MACtB,MAAQ;AAAA,MACR,KAAO;AAAA,MACP,OAAS,SAAS,SAAY,EAAE,SAAS,OAAO;AAAA,IAAA,CACjD,CAAC,GAMI,QAAQ,MAAM;AAClB,cAAQ,MAAO,SACf,OAAO,QAAQ,IACf,KAAK,OAAO;AAAA,IACd,GAMM,OAAO,MAAM;AACjB,cAAQ,MAAO,aACf,OAAO,QAAQ,IACf,KAAK,MAAM;AAAA,IAAA,GASP,cAAc,CAAC,UAAkB;AACrC,WAAK,UAAU,KAAK,GACpB,MACA,GAAA,QAAQ,MAAO,cAAc;AAAA,IAC/B;AAGM,UAAA,QAAQ,CAAC,UAAU;AACvB,UAAI,SAAS,CAAC,QAAQ,MAAO,aAAa,KAAK;AAC/C,UAAI,CAAC,SAAS,QAAQ,MAAO,aAAa,MAAM;AAAA,IAAA,CACjD;AAGK,UAAA,YAAY,SAAS,OAAO;AAAA,MAChC,QAAQ,OAAO;AAAA,MACf;AAAA,MACA;AAAA,MACA;AAAA,IAAA,EAC0B;AAGZ,WAAA,gBAAA;AAAA,MACd;AAAA,MACA;AAAA,MACA;AAAA,IACD,CAAA,GAGM,MAAM;AACL,YAAA,cAAc,EAAE,UAAU,WAAW,OAAO,MAAM,SAAS,UAAU,KAAK,CAAC;AAEjF,aAAO,CADc,MAAM,UAAU,UAAU,KAAK,GAC9B,WAAW;AAAA,IACnC;AAAA,EACF;AAAA,EACA;AAAA,IACE,MAAM;AAAA,IACN,OAAO;AAAA,IACP,cAAc;AAAA,EAAA;AAElB;"}
\ No newline at end of file
+{"version":3,"file":"BaseDialog.js","sources":["../BaseDialog.ts"],"sourcesContent":["import type { Prop, VNode } from 'vue'\nimport type { DefineComponentContext } from './defineSetupComponent'\nimport type { BaseRenderableOptions } from './useBaseRenderable'\nimport { useVModel } from '@vueuse/core'\nimport { computed, h, mergeProps, ref, watch } from 'vue'\nimport { defineSetupComponent } from './defineSetupComponent'\nimport { exposeToDevtool } from './exposeToDevtool'\nimport { BASE_RENDERABLE_OPTIONS, useBaseRenderable } from './useBaseRenderable'\n\n/** The base props for the `BaseDialog` component. */\nexport const BASE_DIALOG_PROPS = {\n  ...BASE_RENDERABLE_OPTIONS,\n  'modelValue': Boolean,\n  'onUpdate:modelValue': [Function, Array],\n  'onClose': [Function, Array],\n  'onOpen': [Function, Array],\n  'onReturn': [Function, Array],\n} satisfies Record<keyof BaseDialogProps, Prop<unknown>>\n\n/** The properties & context of the `BaseDialog` component. */\nexport interface BaseDialogProps<T = unknown> extends BaseRenderableOptions {\n\n  /**\n   * The state of the dialog. If `true`, the dialog is visible. If `false`, the\n   * dialog is hidden.\n   */\n  modelValue?: boolean\n  'onUpdate:modelValue'?: (value: boolean) => void\n\n  /**\n   * The event emitted when the dialog is closed. This is used to notify the parent\n   * component that the dialog has been closed.\n   */\n  onClose?: () => void\n\n  /**\n   * The event emitted when the dialog is opened. This is used to notify the parent\n   * component that the dialog has been opened.\n   */\n  onOpen?: () => void\n\n  /**\n   * Event emitted when the dialog returns a value. This is used to notify the parent\n   * component that the dialog has returned a value.\n   */\n  onReturn?: (value: T) => void\n}\n\nexport interface BaseDialogSlotProps<T = unknown> {\n\n  /** Close and return a value from the dialog. */\n  returnValue: (value: T) => void\n\n  /** Close the dialog. */\n  close(): void\n\n  /** Open the dialog. */\n  open(): void\n\n  /** The state of the dialog. */\n  isOpen: boolean\n}\n\n/** The context of the `BaseDialog` component. */\n// eslint-disable-next-line @typescript-eslint/consistent-type-definitions\nexport type BaseDialogSlots<T = unknown> = {\n  default: (props: BaseDialogSlotProps<T>) => VNode\n}\n\nexport const BaseDialog = /* #__PURE__ */ defineSetupComponent(\n  <T>(props: BaseDialogProps<T>, { attrs, slots, emit }: DefineComponentContext<BaseDialogSlots<T>>) => {\n    const renderable = useBaseRenderable(props)\n    const element = ref<HTMLElement>()\n    const is = computed(() => renderable.is ?? 'dialog')\n    const isOpen = useVModel(props, 'modelValue', emit, { passive: true, defaultValue: false })\n\n    // --- Build the attributes.\n    const attributes = computed(() => mergeProps(attrs, {\n      'aria-modal': 'true',\n      'aria-hidden': isOpen.value,\n      'role': 'dialog',\n      'ref': (value) => { element.value = value as HTMLElement },\n    }))\n\n    /**\n     * Close the dialog and emit the `close` event. This is used to close the dialog\n     * when the user clicks outside of the dialog or presses the escape key.\n     */\n    const close = () => {\n      if (element.value instanceof HTMLDialogElement)\n        element.value.close()\n      isOpen.value = false\n      emit('close')\n    }\n\n    /**\n     * Open the dialog and emit the `open` event. This is used to open the dialog\n     * when the user clicks on the button that opens the dialog.\n     */\n    const open = () => {\n      if (element.value instanceof HTMLDialogElement)\n        element.value.showModal()\n      isOpen.value = true\n      emit('open')\n    }\n\n    /**\n     * Return a value from the dialog and emit the `return` event. This is used to\n     * return a value from the dialog to the parent component.\n     *\n     * @param value The value to return from the dialog.\n     */\n    const returnValue = (value: string) => {\n      emit('return', value)\n      close()\n      if (element.value instanceof HTMLDialogElement)\n        element.value.returnValue = value\n    }\n\n    // --- Observe the model value and update the dialog state.\n    watch(isOpen, (value) => {\n      if (element.value instanceof HTMLDialogElement === false) return\n      if (value && !element.value.open) return open()\n      if (!value && element.value.open) return close()\n    })\n\n    // --- Build the slot properties.\n    const slotProps = computed(() => ({\n      isOpen: isOpen.value!,\n      returnValue,\n      close,\n      open,\n    }) as BaseDialogSlotProps<T>)\n\n    // --- Expose properties.\n    exposeToDevtool({\n      is,\n      isOpen,\n      renderable,\n    })\n\n    // --- Return virtual DOM node.\n    return () => h(\n      renderable.is ?? 'dialog',\n      attributes.value,\n      slots.default?.(slotProps.value),\n    )\n  },\n  {\n    name: 'BaseDialog',\n    props: BASE_DIALOG_PROPS,\n    inheritAttrs: false,\n  },\n)\n"],"names":[],"mappings":";;;;;AAUO,MAAM,oBAAoB;AAAA,EAC/B,GAAG;AAAA,EACH,YAAc;AAAA,EACd,uBAAuB,CAAC,UAAU,KAAK;AAAA,EACvC,SAAW,CAAC,UAAU,KAAK;AAAA,EAC3B,QAAU,CAAC,UAAU,KAAK;AAAA,EAC1B,UAAY,CAAC,UAAU,KAAK;AAC9B,GAoDa,aAA6B;AAAA,EACxC,CAAI,OAA2B,EAAE,OAAO,OAAO,WAAuD;AACpG,UAAM,aAAa,kBAAkB,KAAK,GACpC,UAAU,IACV,GAAA,KAAK,SAAS,MAAM,WAAW,MAAM,QAAQ,GAC7C,SAAS,UAAU,OAAO,cAAc,MAAM,EAAE,SAAS,IAAM,cAAc,GAAM,CAAC,GAGpF,aAAa,SAAS,MAAM,WAAW,OAAO;AAAA,MAClD,cAAc;AAAA,MACd,eAAe,OAAO;AAAA,MACtB,MAAQ;AAAA,MACR,KAAO,CAAC,UAAU;AAAE,gBAAQ,QAAQ;AAAA,MAAA;AAAA,IAAqB,CAC1D,CAAC,GAMI,QAAQ,MAAM;AACd,cAAQ,iBAAiB,qBAC3B,QAAQ,MAAM,SAChB,OAAO,QAAQ,IACf,KAAK,OAAO;AAAA,IACd,GAMM,OAAO,MAAM;AACb,cAAQ,iBAAiB,qBAC3B,QAAQ,MAAM,aAChB,OAAO,QAAQ,IACf,KAAK,MAAM;AAAA,IAAA,GASP,cAAc,CAAC,UAAkB;AAChC,WAAA,UAAU,KAAK,GACpB,MAAM,GACF,QAAQ,iBAAiB,sBAC3B,QAAQ,MAAM,cAAc;AAAA,IAChC;AAGM,UAAA,QAAQ,CAAC,UAAU;AACnB,UAAA,QAAQ,iBAAiB,mBAC7B;AAAA,YAAI,SAAS,CAAC,QAAQ,MAAM,aAAa,KAAK;AAC9C,YAAI,CAAC,SAAS,QAAQ,MAAM,aAAa,MAAM;AAAA,MAAA;AAAA,IAAA,CAChD;AAGK,UAAA,YAAY,SAAS,OAAO;AAAA,MAChC,QAAQ,OAAO;AAAA,MACf;AAAA,MACA;AAAA,MACA;AAAA,IAAA,EAC0B;AAGZ,WAAA,gBAAA;AAAA,MACd;AAAA,MACA;AAAA,MACA;AAAA,IACD,CAAA,GAGM,MAAM;AAAA,MACX,WAAW,MAAM;AAAA,MACjB,WAAW;AAAA,MACX,MAAM,UAAU,UAAU,KAAK;AAAA,IACjC;AAAA,EACF;AAAA,EACA;AAAA,IACE,MAAM;AAAA,IACN,OAAO;AAAA,IACP,cAAc;AAAA,EAAA;AAElB;"}
\ No newline at end of file
diff --git a/dist/BaseInputFile.d.ts b/dist/BaseInputFile.d.ts
index 9e35a616671e1a2908e902bf5376b7eaa3d2f875..98c922d509e06d21eec3f45564719c7b5bc668da 100644
--- a/dist/BaseInputFile.d.ts
+++ b/dist/BaseInputFile.d.ts
@@ -8,21 +8,21 @@ import '@unshared/types';
 /** The base props for the `BaseInputFile` component. */
 declare const BASE_INPUT_FILE_PROPS: {
     disabled: BooleanConstructor;
-    error: (StringConstructor | ErrorConstructor)[];
+    error: (ErrorConstructor | StringConstructor)[];
     loading: BooleanConstructor[];
     readonly: BooleanConstructor[];
-    'onUpdate:disabled': (ArrayConstructor | FunctionConstructor)[];
-    'onUpdate:error': (ArrayConstructor | FunctionConstructor)[];
-    'onUpdate:loading': (ArrayConstructor | FunctionConstructor)[];
-    'onUpdate:readonly': (ArrayConstructor | FunctionConstructor)[];
+    'onUpdate:disabled': (FunctionConstructor | ArrayConstructor)[];
+    'onUpdate:error': (FunctionConstructor | ArrayConstructor)[];
+    'onUpdate:loading': (FunctionConstructor | ArrayConstructor)[];
+    'onUpdate:readonly': (FunctionConstructor | ArrayConstructor)[];
     classDisabled: StringConstructor;
     classError: StringConstructor;
     classLoading: StringConstructor;
     classReadonly: StringConstructor;
     as: Prop<unknown>;
     modelValue: {};
-    'onUpdate:modelValue': (ArrayConstructor | FunctionConstructor)[];
-    onInsert: (ArrayConstructor | FunctionConstructor)[];
+    'onUpdate:modelValue': (FunctionConstructor | ArrayConstructor)[];
+    onInsert: (FunctionConstructor | ArrayConstructor)[];
     multiple: BooleanConstructor;
     accept: StringConstructor;
 };
diff --git a/dist/BaseInputText.d.ts b/dist/BaseInputText.d.ts
index a2abb909b8ead57fabc38cb23c45c5a2863b03cf..fb04e6b14d7403037298685b5ae31d555ae52309 100644
--- a/dist/BaseInputText.d.ts
+++ b/dist/BaseInputText.d.ts
@@ -8,13 +8,13 @@ import '@unshared/types';
 /** The base props for the `BaseInputText` component. */
 declare const BASE_INPUT_TEXT_PROPS: {
     disabled: BooleanConstructor;
-    error: (StringConstructor | ErrorConstructor)[];
+    error: (ErrorConstructor | StringConstructor)[];
     loading: BooleanConstructor[];
     readonly: BooleanConstructor[];
-    'onUpdate:disabled': (ArrayConstructor | FunctionConstructor)[];
-    'onUpdate:error': (ArrayConstructor | FunctionConstructor)[];
-    'onUpdate:loading': (ArrayConstructor | FunctionConstructor)[];
-    'onUpdate:readonly': (ArrayConstructor | FunctionConstructor)[];
+    'onUpdate:disabled': (FunctionConstructor | ArrayConstructor)[];
+    'onUpdate:error': (FunctionConstructor | ArrayConstructor)[];
+    'onUpdate:loading': (FunctionConstructor | ArrayConstructor)[];
+    'onUpdate:readonly': (FunctionConstructor | ArrayConstructor)[];
     classDisabled: StringConstructor;
     classError: StringConstructor;
     classLoading: StringConstructor;
@@ -22,7 +22,7 @@ declare const BASE_INPUT_TEXT_PROPS: {
     as: Prop<unknown>;
     id: StringConstructor;
     modelValue: {};
-    'onUpdate:modelValue': (ArrayConstructor | FunctionConstructor)[];
+    'onUpdate:modelValue': (FunctionConstructor | ArrayConstructor)[];
     type: {
         type: StringConstructor;
         default: string;
diff --git a/dist/BaseInputToggle.d.ts b/dist/BaseInputToggle.d.ts
index da71bb4d47f3fd87095101e4ce26de191a26108a..ec7b86cf4154f22455f115a89c2bda600e31e5c8 100644
--- a/dist/BaseInputToggle.d.ts
+++ b/dist/BaseInputToggle.d.ts
@@ -9,13 +9,13 @@ import '@unshared/types';
 declare const BASE_INPUT_TOGGLE_PROPS: {
     as: Prop<unknown>;
     disabled: BooleanConstructor;
-    error: (StringConstructor | ErrorConstructor)[];
+    error: (ErrorConstructor | StringConstructor)[];
     loading: BooleanConstructor[];
     readonly: BooleanConstructor[];
-    'onUpdate:disabled': (ArrayConstructor | FunctionConstructor)[];
-    'onUpdate:error': (ArrayConstructor | FunctionConstructor)[];
-    'onUpdate:loading': (ArrayConstructor | FunctionConstructor)[];
-    'onUpdate:readonly': (ArrayConstructor | FunctionConstructor)[];
+    'onUpdate:disabled': (FunctionConstructor | ArrayConstructor)[];
+    'onUpdate:error': (FunctionConstructor | ArrayConstructor)[];
+    'onUpdate:loading': (FunctionConstructor | ArrayConstructor)[];
+    'onUpdate:readonly': (FunctionConstructor | ArrayConstructor)[];
     classDisabled: StringConstructor;
     classError: StringConstructor;
     classLoading: StringConstructor;
@@ -24,12 +24,12 @@ declare const BASE_INPUT_TOGGLE_PROPS: {
         type: StringConstructor;
         default: string;
     };
-    modelValue: (ArrayConstructor | BooleanConstructor | StringConstructor | ObjectConstructor | NumberConstructor)[];
-    'onUpdate:modelValue': (ArrayConstructor | FunctionConstructor)[];
-    onOff: (ArrayConstructor | FunctionConstructor)[];
-    onOn: (ArrayConstructor | FunctionConstructor)[];
-    onToggle: (ArrayConstructor | FunctionConstructor)[];
-    value: (ArrayConstructor | BooleanConstructor | StringConstructor | NumberConstructor)[];
+    modelValue: (BooleanConstructor | StringConstructor | ArrayConstructor | ObjectConstructor | NumberConstructor)[];
+    'onUpdate:modelValue': (FunctionConstructor | ArrayConstructor)[];
+    onOff: (FunctionConstructor | ArrayConstructor)[];
+    onOn: (FunctionConstructor | ArrayConstructor)[];
+    onToggle: (FunctionConstructor | ArrayConstructor)[];
+    value: (BooleanConstructor | StringConstructor | ArrayConstructor | NumberConstructor)[];
     eager: BooleanConstructor;
     classActive: {
         type: StringConstructor;
diff --git a/dist/BaseMenu.d.ts b/dist/BaseMenu.d.ts
index 44fb870f8527879983dd7c56f5e3623a95844785..8846bd04154e5c196fa05bb6e527ef5c6186c6f2 100644
--- a/dist/BaseMenu.d.ts
+++ b/dist/BaseMenu.d.ts
@@ -6,10 +6,10 @@ import '@unshared/types';
 /** The base props for the `BaseMenu` component. */
 declare const BASE_MENU_PROPS: {
     modelValue: BooleanConstructor;
-    'onUpdate:modelValue': (ArrayConstructor | FunctionConstructor)[];
-    onOpen: (ArrayConstructor | FunctionConstructor)[];
-    onClose: (ArrayConstructor | FunctionConstructor)[];
-    onToggle: (ArrayConstructor | FunctionConstructor)[];
+    'onUpdate:modelValue': (FunctionConstructor | ArrayConstructor)[];
+    onOpen: (FunctionConstructor | ArrayConstructor)[];
+    onClose: (FunctionConstructor | ArrayConstructor)[];
+    onToggle: (FunctionConstructor | ArrayConstructor)[];
     persistent: BooleanConstructor;
     x: StringConstructor;
     y: StringConstructor;
diff --git a/dist/BaseTable.d.ts b/dist/BaseTable.d.ts
index 1768974849182b848c88415f6d63fd163c193ef1..09e81a680229a4bcb1a30b796220a8d9a75f7946 100644
--- a/dist/BaseTable.d.ts
+++ b/dist/BaseTable.d.ts
@@ -20,13 +20,13 @@ declare const BASE_TABLE_PROPS: {
     classRow: {};
     classCell: {};
     disabled: BooleanConstructor;
-    error: (StringConstructor | ErrorConstructor)[];
+    error: (ErrorConstructor | StringConstructor)[];
     loading: BooleanConstructor[];
     readonly: BooleanConstructor[];
-    'onUpdate:disabled': (ArrayConstructor | FunctionConstructor)[];
-    'onUpdate:error': (ArrayConstructor | FunctionConstructor)[];
-    'onUpdate:loading': (ArrayConstructor | FunctionConstructor)[];
-    'onUpdate:readonly': (ArrayConstructor | FunctionConstructor)[];
+    'onUpdate:disabled': (FunctionConstructor | ArrayConstructor)[];
+    'onUpdate:error': (FunctionConstructor | ArrayConstructor)[];
+    'onUpdate:loading': (FunctionConstructor | ArrayConstructor)[];
+    'onUpdate:readonly': (FunctionConstructor | ArrayConstructor)[];
     classDisabled: StringConstructor;
     classError: StringConstructor;
     classLoading: StringConstructor;
diff --git a/dist/useBaseContentEditable.d.ts b/dist/useBaseContentEditable.d.ts
index 5327f8d5960fc5f9a61447ba2f87ad94d5901f43..151e30a23fcfd61a566e8eb0652d85c849cc153b 100644
--- a/dist/useBaseContentEditable.d.ts
+++ b/dist/useBaseContentEditable.d.ts
@@ -39,17 +39,17 @@ declare const BASE_CONTENT_EDITABLE_SYMBOL: unique symbol;
 /** The options for the `useBaseContentEditable` composable. */
 declare const BASE_CONTENT_EDITABLE_OPTIONS: {
     modelValue: {};
-    'onUpdate:modelValue': (ArrayConstructor | FunctionConstructor)[];
+    'onUpdate:modelValue': (FunctionConstructor | ArrayConstructor)[];
     parse: FunctionConstructor;
     serialize: FunctionConstructor;
     disabled: BooleanConstructor;
-    error: (StringConstructor | ErrorConstructor)[];
+    error: (ErrorConstructor | StringConstructor)[];
     loading: BooleanConstructor[];
     readonly: BooleanConstructor[];
-    'onUpdate:disabled': (ArrayConstructor | FunctionConstructor)[];
-    'onUpdate:error': (ArrayConstructor | FunctionConstructor)[];
-    'onUpdate:loading': (ArrayConstructor | FunctionConstructor)[];
-    'onUpdate:readonly': (ArrayConstructor | FunctionConstructor)[];
+    'onUpdate:disabled': (FunctionConstructor | ArrayConstructor)[];
+    'onUpdate:error': (FunctionConstructor | ArrayConstructor)[];
+    'onUpdate:loading': (FunctionConstructor | ArrayConstructor)[];
+    'onUpdate:readonly': (FunctionConstructor | ArrayConstructor)[];
     classDisabled: StringConstructor;
     classError: StringConstructor;
     classLoading: StringConstructor;
diff --git a/dist/useBaseInputFile.d.ts b/dist/useBaseInputFile.d.ts
index c0104d45d6f863426906a0fafe02e7e0feebe4a2..444e1887ed122e6f1d22757c9d583de26c4aeb99 100644
--- a/dist/useBaseInputFile.d.ts
+++ b/dist/useBaseInputFile.d.ts
@@ -5,8 +5,8 @@ declare const BASE_INPUT_FILE_SYMBOL: unique symbol;
 /** The props when using the `useBaseInputFile` composable. */
 declare const BASE_INPUT_FILE_OPTIONS: {
     modelValue: {};
-    'onUpdate:modelValue': (ArrayConstructor | FunctionConstructor)[];
-    onInsert: (ArrayConstructor | FunctionConstructor)[];
+    'onUpdate:modelValue': (FunctionConstructor | ArrayConstructor)[];
+    onInsert: (FunctionConstructor | ArrayConstructor)[];
     multiple: BooleanConstructor;
     accept: StringConstructor;
 };
diff --git a/dist/useBaseInputList.d.ts b/dist/useBaseInputList.d.ts
index 4f981abf11ec2c5f3d000d79ea23fbde758554e0..8933e32f9423e0f63d19af336e702e121975a66b 100644
--- a/dist/useBaseInputList.d.ts
+++ b/dist/useBaseInputList.d.ts
@@ -6,9 +6,9 @@ declare const BASE_INPUT_LIST_SYMBOL: unique symbol;
 declare const BASE_INPUT_LIST_OPTIONS: {
     options: {};
     modelValue: {};
-    'onUpdate:modelValue': (ArrayConstructor | FunctionConstructor)[];
+    'onUpdate:modelValue': (FunctionConstructor | ArrayConstructor)[];
     search: StringConstructor;
-    'onUpdate:search': (ArrayConstructor | FunctionConstructor)[];
+    'onUpdate:search': (FunctionConstructor | ArrayConstructor)[];
     allowCustomValue: BooleanConstructor;
     optionValue: FunctionConstructor;
     optionLabel: FunctionConstructor;
diff --git a/dist/useBaseInputText.d.ts b/dist/useBaseInputText.d.ts
index c8b424da0a6bbaabd1a4e3d7390cf4868f6e719f..4dd7f6370ac8f4bd7ca72d356883d4270b292526 100644
--- a/dist/useBaseInputText.d.ts
+++ b/dist/useBaseInputText.d.ts
@@ -8,7 +8,7 @@ declare const BASE_INPUT_TEXT_SYMBOL: unique symbol;
 declare const BASE_INPUT_TEXT_OPTIONS: {
     id: StringConstructor;
     modelValue: {};
-    'onUpdate:modelValue': (ArrayConstructor | FunctionConstructor)[];
+    'onUpdate:modelValue': (FunctionConstructor | ArrayConstructor)[];
     type: {
         type: StringConstructor;
         default: string;
@@ -20,13 +20,13 @@ declare const BASE_INPUT_TEXT_OPTIONS: {
     parse: FunctionConstructor;
     serialize: FunctionConstructor;
     disabled: BooleanConstructor;
-    error: (StringConstructor | ErrorConstructor)[];
+    error: (ErrorConstructor | StringConstructor)[];
     loading: BooleanConstructor[];
     readonly: BooleanConstructor[];
-    'onUpdate:disabled': (ArrayConstructor | FunctionConstructor)[];
-    'onUpdate:error': (ArrayConstructor | FunctionConstructor)[];
-    'onUpdate:loading': (ArrayConstructor | FunctionConstructor)[];
-    'onUpdate:readonly': (ArrayConstructor | FunctionConstructor)[];
+    'onUpdate:disabled': (FunctionConstructor | ArrayConstructor)[];
+    'onUpdate:error': (FunctionConstructor | ArrayConstructor)[];
+    'onUpdate:loading': (FunctionConstructor | ArrayConstructor)[];
+    'onUpdate:readonly': (FunctionConstructor | ArrayConstructor)[];
     classDisabled: StringConstructor;
     classError: StringConstructor;
     classLoading: StringConstructor;
diff --git a/dist/useBaseInputToggle.d.ts b/dist/useBaseInputToggle.d.ts
index 86af4d541d8b4abd0b804275767ed8412a2c9a1b..264927f39c53147c5a731a5c436f5690ef7341a0 100644
--- a/dist/useBaseInputToggle.d.ts
+++ b/dist/useBaseInputToggle.d.ts
@@ -88,12 +88,12 @@ declare const BASE_INPUT_TOGGLE_OPTIONS: {
         type: StringConstructor;
         default: string;
     };
-    modelValue: (ArrayConstructor | BooleanConstructor | StringConstructor | ObjectConstructor | NumberConstructor)[];
-    'onUpdate:modelValue': (ArrayConstructor | FunctionConstructor)[];
-    onOff: (ArrayConstructor | FunctionConstructor)[];
-    onOn: (ArrayConstructor | FunctionConstructor)[];
-    onToggle: (ArrayConstructor | FunctionConstructor)[];
-    value: (ArrayConstructor | BooleanConstructor | StringConstructor | NumberConstructor)[];
+    modelValue: (BooleanConstructor | StringConstructor | ArrayConstructor | ObjectConstructor | NumberConstructor)[];
+    'onUpdate:modelValue': (FunctionConstructor | ArrayConstructor)[];
+    onOff: (FunctionConstructor | ArrayConstructor)[];
+    onOn: (FunctionConstructor | ArrayConstructor)[];
+    onToggle: (FunctionConstructor | ArrayConstructor)[];
+    value: (BooleanConstructor | StringConstructor | ArrayConstructor | NumberConstructor)[];
     eager: BooleanConstructor;
     classActive: {
         type: StringConstructor;
diff --git a/dist/useBaseState.d.ts b/dist/useBaseState.d.ts
index 8e592223443ac042bede77399ff6eb3f4a487bf9..2b7629e1c6bca01c282bcc166a0ecdb83840381c 100644
--- a/dist/useBaseState.d.ts
+++ b/dist/useBaseState.d.ts
@@ -95,13 +95,13 @@ declare const BASE_STATE_SYMBOL: unique symbol;
 /** The properties of the base state component. */
 declare const BASE_STATE_OPTIONS: {
     disabled: BooleanConstructor;
-    error: (StringConstructor | ErrorConstructor)[];
+    error: (ErrorConstructor | StringConstructor)[];
     loading: BooleanConstructor[];
     readonly: BooleanConstructor[];
-    'onUpdate:disabled': (ArrayConstructor | FunctionConstructor)[];
-    'onUpdate:error': (ArrayConstructor | FunctionConstructor)[];
-    'onUpdate:loading': (ArrayConstructor | FunctionConstructor)[];
-    'onUpdate:readonly': (ArrayConstructor | FunctionConstructor)[];
+    'onUpdate:disabled': (FunctionConstructor | ArrayConstructor)[];
+    'onUpdate:error': (FunctionConstructor | ArrayConstructor)[];
+    'onUpdate:loading': (FunctionConstructor | ArrayConstructor)[];
+    'onUpdate:readonly': (FunctionConstructor | ArrayConstructor)[];
     classDisabled: StringConstructor;
     classError: StringConstructor;
     classLoading: StringConstructor;
