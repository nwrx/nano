{{- if .Values.database.enabled -}}
apiVersion: apps/v1
kind: Deployment
metadata:
  name: {{ include "nano.database.fullname" . }}
  labels:
    {{- include "nano.labels" . | nindent 4 }}
    app.kubernetes.io/component: database
spec:
  replicas: 1
  strategy:
    type: Recreate  # Required for ReadWriteOnce volumes
  selector:
    matchLabels:
      {{- include "nano.database.selectorLabels" . | nindent 6 }}
  template:
    metadata:
      annotations:
        checksum/secret-database: {{ include (print $.Template.BasePath "/database/secrets.yaml") . | sha256sum }}
        {{- with .Values.database.podAnnotations }}
        {{- toYaml . | nindent 8 }}
        {{- end }}
      labels:
        {{- include "nano.database.selectorLabels" . | nindent 8 }}
        app.kubernetes.io/component: database
    spec:
      {{- with .Values.database.imagePullSecrets }}
      imagePullSecrets:
        {{- toYaml . | nindent 8 }}
      {{- end }}
      serviceAccountName: {{ include "nano.database.serviceAccountName" . }}
      securityContext:
        {{- toYaml .Values.database.podSecurityContext | nindent 8 }}
      containers:
        - name: postgres
          securityContext:
            {{- toYaml .Values.database.securityContext | nindent 12 }}
          image: "{{ .Values.database.image.repository }}:{{ .Values.database.image.tag }}"
          imagePullPolicy: {{ .Values.database.image.pullPolicy }}
          ports:
            - name: postgres
              containerPort: 5432
              protocol: TCP
          env:
            - name: PGDATA
              value: /var/lib/postgresql/data/pgdata
            - name: POSTGRES_USER
              valueFrom:
                secretKeyRef:
                  name: {{ include "nano.database.secrets" . }}
                  key: username
            - name: POSTGRES_PASSWORD
              valueFrom:
                secretKeyRef:
                  name: {{ include "nano.database.secrets" . }}
                  key: password
            - name: POSTGRES_DB
              valueFrom:
                secretKeyRef:
                  name: {{ include "nano.database.secrets" . }}
                  key: database
          {{- with .Values.database.livenessProbe }}
          livenessProbe:
            {{- toYaml . | nindent 12 }}
          {{- end }}
          {{- with .Values.database.readinessProbe }}
          readinessProbe:
            {{- toYaml . | nindent 12 }}
          {{- end }}
          {{- with .Values.database.startupProbe }}
          startupProbe:
            {{- toYaml . | nindent 12 }}
          {{- end }}
          resources:
            {{- toYaml .Values.database.resources | nindent 12 }}
          volumeMounts:
            - name: data
              mountPath: /var/lib/postgresql/data
            - name: tmp
              mountPath: /tmp
      volumes:
        - name: data
          {{- if .Values.database.persistence.enabled }}
          persistentVolumeClaim:
            claimName: {{ include "nano.database.fullname" . }}-data
          {{- else }}
          emptyDir: {}
          {{- end }}
        - name: tmp
          emptyDir: {}
      {{- with .Values.database.nodeSelector }}
      nodeSelector:
        {{- toYaml . | nindent 8 }}
      {{- end }}
      {{- with .Values.database.affinity }}
      affinity:
        {{- toYaml . | nindent 8 }}
      {{- end }}
      {{- with .Values.database.tolerations }}
      tolerations:
        {{- toYaml . | nindent 8 }}
      {{- end }}
{{- end }}
