{{- range .Values.runners }}
{{- if .enabled }}
{{- $runner := . }}
{{- $root := $ }}
---
apiVersion: apps/v1
kind: StatefulSet
metadata:
  name: {{ include "nano.runner.name" (dict "runner" $runner "root" $root) }}
  labels:
    {{- include "nano.runner.labels" (dict "runner" $runner "root" $root) | nindent 4 }}
spec:
  serviceName: {{ include "nano.runner.name" (dict "runner" $runner "root" $root) }}-headless
  replicas: {{ $runner.instances | default 1 }}
  selector:
    matchLabels:
      {{- include "nano.runner.selectorLabels" (dict "runner" $runner "root" $root) | nindent 6 }}
  template:
    metadata:
      annotations:
        checksum/secret: {{ include (print $.Template.BasePath "/secrets.yaml") $ | sha256sum }}
        {{- with $.Values.podAnnotations }}
        {{- toYaml . | nindent 8 }}
        {{- end }}
      labels:
        {{- include "nano.runner.selectorLabels" (dict "runner" $runner "root" $root) | nindent 8 }}
    spec:
      {{- with $.Values.imagePullSecrets }}
      imagePullSecrets:
        {{- toYaml . | nindent 8 }}
      {{- end }}
      serviceAccountName: {{ include "nano.serviceAccountName" $ }}
      {{- with $.Values.podSecurityContext }}
      securityContext:
        {{- toYaml . | nindent 8 }}
      {{- end }}
      containers:
        - name: runner
          image: {{ include "nano.image" $ }}
          imagePullPolicy: {{ $.Values.global.image.pullPolicy }}
          command: ['sh', '-c']
          args:
            - |
              # Extract ordinal from pod name (e.g., nano-runner-main-2 -> 2)
              ORDINAL=$(echo "$RUNNER_NAME" | sed 's/.*-//')
              TOKEN_VAR_NAME="{{ include "nano.runner.name" (dict "runner" $runner "root" $root) | upper | replace "-" "_" }}_${ORDINAL}"
              RUNNER_TOKEN=$(eval echo \$$TOKEN_VAR_NAME)
              if [ -z "$RUNNER_TOKEN" ]; then
                echo "ERROR: Could not find token for $RUNNER_NAME (expected env var: $TOKEN_VAR_NAME)"
                env | grep -E "(TOKEN|RUNNER)" | sort
                exit 1
              fi
              echo "Starting runner $RUNNER_NAME (ordinal: $ORDINAL) with token from $TOKEN_VAR_NAME"
              export RUNNER_TOKEN
              exec nano runner
          ports:
            - name: http
              containerPort: {{ $runner.port }}
              protocol: TCP
          env:
            - name: NODE_ENV
              value: production
            - name: HOST
              value: "0.0.0.0"
            - name: PORT
              value: {{ $runner.port | quote }}
            - name: RUNNER_NAME
              valueFrom:
                fieldRef:
                  fieldPath: metadata.name
            - name: RUNNER_POOL
              value: {{ $runner.name | quote }}
          envFrom:
            - secretRef:
                name: {{ include "nano.fullname" $ }}-runner-tokens
          {{- with $runner.livenessProbe }}
          livenessProbe:
            {{- toYaml . | nindent 12 }}
          {{- else }}
          livenessProbe:
            httpGet:
              path: /ping
              port: http
            initialDelaySeconds: 30
            periodSeconds: 10
            timeoutSeconds: 5
            successThreshold: 1
            failureThreshold: 3
          {{- end }}
          {{- with $runner.readinessProbe }}
          readinessProbe:
            {{- toYaml . | nindent 12 }}
          {{- else }}
          readinessProbe:
            httpGet:
              path: /ping
              port: http
            initialDelaySeconds: 5
            periodSeconds: 5
            timeoutSeconds: 3
            successThreshold: 1
            failureThreshold: 3
          {{- end }}
          {{- with $runner.resources }}
          resources:
            {{- toYaml . | nindent 12 }}
          {{- else }}
          resources:
            limits:
              cpu: 500m
              memory: 512Mi
            requests:
              cpu: 250m
              memory: 256Mi
          {{- end }}
          {{- with $.Values.securityContext }}
          securityContext:
            {{- toYaml . | nindent 12 }}
          {{- end }}
          volumeMounts:
            - name: tmp
              mountPath: /tmp
            - name: cache
              mountPath: /app/.cache
      volumes:
        - name: tmp
          emptyDir: {}
        - name: cache
          emptyDir: {}
      {{- with $.Values.nodeSelector }}
      nodeSelector:
        {{- toYaml . | nindent 8 }}
      {{- end }}
      {{- with $.Values.affinity }}
      affinity:
        {{- toYaml . | nindent 8 }}
      {{- end }}
      {{- with $.Values.tolerations }}
      tolerations:
        {{- toYaml . | nindent 8 }}
      {{- end }}
{{- end }}
{{- end }}
