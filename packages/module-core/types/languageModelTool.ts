import type { MaybePromise, ObjectLike } from '@unshared/types'
import type { JSONSchema4 } from 'json-schema'
import { defineType } from '@nwrx/core'
import { toKebabCase } from '@unshared/string'
import { assertFunction, assertObject, assertStringNotEmpty, createParser } from '@unshared/validation'

export interface LanguageModelTool<T = ObjectLike> {

  /**
   * The name of the tool. It is used to identify the tool in the list of tools
   * available to the language model API.
   *
   * @example 'Weather Forecast'
   */
  name: string

  /**
   * The description of the tool. It is used to provide additional information
   * about the tool to the user of the language model API.
   *
   * @example 'A tool that can be used to get the weather forecast.'
   */
  description: string

  /**
   * The schema of the data that the tool can accept. It is used to validate the
   * data passed to the tool before calling it. It must be a format that can be
   * interpreted by the language model API.
   *
   * @example
   * {
   *   type: "object",
   *   required: ["location", "unit"],
   *   properties: {
   *     location: {
   *       type: "string",
   *       description: "The city and state, e.g., San Francisco, CA",
   *     },
   *     unit: {
   *       type: "string",
   *       enum: ["Celsius", "Fahrenheit"],
   *       description: "The temperature unit to use. Infer this from the user's location.",
   *     },
   *   },
   * }
   */
  schema: JSONSchema4

  /**
   * The function that calls the language model API. It is used to interact with the
   * model API to generate completions based on the data passed to the tool. It must
   * return the completion generated by the model API.
   *
   * @example ({ location, unit }) => `What is the temperature in ${location} in ${unit}?`
   */
  call: (data: T) => MaybePromise<string>
}

export const languageModelTool = defineType<LanguageModelTool>({
  kind: 'language-model-tool',
  name: 'Language Model Tool',
  color: '#5636D9',
  description: 'A tool that can be used to interact with a language model API.',
  parse: createParser({
    name: [assertStringNotEmpty, toKebabCase],
    description: assertStringNotEmpty,
    schema: assertObject<JSONSchema4>,
    call: assertFunction<LanguageModelTool['call']>,
  }),
})
