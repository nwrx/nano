export interface AudioResponse {

  /** Unique identifier for this audio response. */
  id: string

  /**
   * The Unix timestamp (in seconds) when this audio response will no longer be
   * accessible on the server for use in multi-turn conversations.
   */
  expires_at: number

  /**
   * Base64 encoded audio bytes generated by the model, in the format specified
   * in the request.
   */
  data: string

  /** Transcript of the audio generated by the model. */
  transcript: string
}

export interface AudioData {

  /** Unique identifier for this audio response.  */
  id: string

  /**
   * The Unix timestamp (in seconds) for when this audio response will no longer
   * be accessible on the server for use in multi-turn conversations.
   */
  expires_at: number

  /**
   * Base64 encoded audio bytes generated by the model, in the format specified
   * in the request.
   */
  data: string

  /** Transcript of the audio generated by the model.  */
  transcript: string
}

export interface AudioParameters {

  /**
   * Specifies the voice type. Supported voices are `alloy`, `echo`, `fable`, `onyx`, `nova`, and `shimmer`.
   */
  voice: 'alloy' | 'echo' | 'fable' | 'nova' | 'onyx' | 'shimmer'

  /**
   * Specifies the output audio format. Must be one of `wav`, `mp3`, `flac`, `opus`, or `pcm16`.
   */
  format: 'flac' | 'mp3' | 'opus' | 'pcm16' | 'wav'
}

export interface ToolCall {

  /** The ID of the tool call. */
  id: string

  /** The type of the tool. Currently, only 'function' is supported. */
  type: 'function'

  /** The function that the model called. */
  function: {

    /** The name of the function to call. */
    name: string

    /**
     * The arguments to call the function with, as generated by the model in JSON
     * format. Note that the model does not always generate valid JSON, and may
     * hallucinate parameters not defined by your function schema. Validate the
     * arguments in your code before calling your function.
     */
    arguments: string
  }
}

/** A union type representing possible message types in the request. */
export type Message =
  | MessageAssistant
  | MessageSystem
  | MessageTool
  | MessageUser

/** Message from the system role. */
interface MessageSystem {
  role: 'system'

  /** The contents of the system message. */
  content: string | string[]

  /**
   * An optional name for the participant to differentiate between participants
   * of the same role.
   */
  name?: string
}

/** Message from the user role. */
interface MessageUser {
  role: 'user'

  /** The contents of the user message. */
  content: string | string[]

  /**
   * An optional name for the participant to differentiate between participants
   * of the same role.
   */
  name?: string
}

/** Message from the assistant role. */
interface MessageAssistant {
  role: 'assistant'

  /** The contents of the assistant message. */
  content?: string | string[]

  /** The refusal message by the assistant. */
  refusal?: string

  /**
   * An optional name for the participant to differentiate between participants
   * of the same role.
   */
  name?: string

  /** Data about a previous audio response from the model. Learn more. */
  audio?: AudioData

  /** The tool calls generated by the model, such as function calls. */
  tool_calls?: ToolCall[]
}

/** Message from the tool role. */
interface MessageTool {
  role: 'tool'

  /** The contents of the tool message. */
  content?: string | string[]

  /** Tool call that this message is responding to. */
  tool_call_id: string
}
