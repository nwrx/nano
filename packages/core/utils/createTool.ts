import type { ObjectLike } from '@unshared/types'
import type { InferSchema, SocketSchema } from './defineComponent'
import { dedent } from '@unshared/string'

export interface ThreadEventToolCallRequest {
  id: string
  tool: string
  parameters: ObjectLike
}

export interface ThreadEventToolCallResponse {
  id: string
  result: any
}

export interface ThreadEventToolCallError {
  id: string
  error: Error
}

export const toolSchema = {
  type: 'object',
  properties: {

    /**
     * The name of the tool. It is used to identify the tool in the list of tools
     * available to the language model API.
     *
     * @example 'Weather Forecast'
     */
    name: {
      type: 'string',
      title: 'Name',
      description: 'The name of the tool to identify it in the list of tools.',
    },

    /**
     * The description of the tool to provide additional information about it to LLM.
     * It allows the LLM to understand the purpose of the tool and how, when, and where to use it.
     *
     * @example 'A tool that can be used to get the weather forecast.'
     */
    description: {
      type: 'string',
      title: 'Description',
      description: dedent(`
        The description of the tool to provide additional information about it to LLM.
        It allows the LLM to understand the purpose of the tool and how, when, and where to use it.
      `),
    },

    /**
     * The schema of the data that the tool can accept. It is used to validate the
     * data passed to the tool before calling it. It must be a format that can be
     * interpreted by the language model API.
     *
     * @example
     * {
     *   location: {
     *     type: "string",
     *     description: "The city and state, e.g., San Francisco, CA",
     *   },
     *   unit: {
     *     type: "string",
     *     enum: ["Celsius", "Fahrenheit"],
     *     description: "The temperature unit to use. Infer this from the user's location.",
     *   },
     * }
     */
    properties: {
      type: 'object',
      title: 'Properties',
      additionalProperties: { type: 'object', additionalProperties: true },
      description: 'The schema of the data that the tool can accept.',
    },

    /**
     * The function that calls the language model API. It is used to interact with the
     * model API to generate completions based on the data passed to the tool. It must
     * return the completion generated by the model API.
     *
     * @example ({ location, unit }) => `What is the temperature in ${location} in ${unit}?`
     */
    call: {
      'title': 'Call',
      'description': 'The function that calls the language model API.',
      'x-type': 'function',
      'x-resolves': { type: 'object', additionalProperties: true },
    },
  },
} satisfies SocketSchema

/** A tool that can be used by an LLM to extend its capabilities. */
export type LanguageModelTool = InferSchema<typeof toolSchema['properties']>

/**
 * Creates a tool that can be used by an LLM to extend its capabilities.
 *
 * @param tool The tool to create.
 * @returns The created tool object.
 */
export function createTool(tool: LanguageModelTool) {
  return {
    call: tool.call,
    name: tool.name,
    description: tool.description,
    parameters: {
      type: 'object',
      required: Object.entries(tool.properties)
        .filter(([,property]) => property['x-optional'] !== true)
        .map(([name]) => name),
      properties: {
        ...tool.properties,
        __toolName: {
          type: 'string',
          description: 'The display name of the tool. This is used to identify the tool in the UI.',
        },
        __toolMessage: {
          type: 'string',
          description: dedent(`
            A short description of what the tool is currently doing. This is used to provide context to the user.
            It should be concise and informative, e.g., "Getting the weather forecast for San Francisco, CA from the OpenWeather API."
          `),
        },
      },
    },
  }
}
