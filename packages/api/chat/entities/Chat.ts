import { FlowV1 } from '@nwrx/core'
import { BaseEntity, transformerJson } from '@unserved/server'
import { UUID } from 'node:crypto'
import { Column, Entity, JoinColumn, ManyToOne, OneToMany } from 'typeorm'
import { Flow } from '../../flow'
import { User, UserObject } from '../../user'
import { ChatMessage, ChatMessageObject } from './ChatMessage'

/**
 * A `ChatThread` represents the lifecycle of a flow and stores messages sent and received by the flow.
 */
@Entity({ name: 'ChatThread' })
export class ChatThread extends BaseEntity {

  /**
   * The flow that the thread is associated with.
   *
   * @example Flow { ... }
   */
  @JoinColumn()
  @ManyToOne(() => Flow, { nullable: false, onDelete: 'CASCADE' })
  flow: Flow

  /**
   * The data of the flow at the time it was started.
   *
   * @example { version: '1', nodes: [...] }
   */
  @Column('json', { transformer: transformerJson })
  data: FlowV1

  /**
   * The autogenerated title of the thread. Usually done by the LLM.
   *
   * @example 'How to change an oil filter'
   */
  @Column('varchar', { length: 255, nullable: false })
  title: string

  /**
   * The summary of the thread. Usually done by the LLM.
   *
   * @example 'This thread will guide you through the process of changing an oil filter.'
   */
  @Column('text', { nullable: false })
  description: string

  /**
   * The user that triggered the execution of the thread.
   *
   * @example User { ... }
   */
  @JoinColumn()
  @ManyToOne(() => User, { nullable: false, onDelete: 'CASCADE' })
  createdBy: User

  /**
   * The messages sent and received by the flow thread.
   *
   * @example [ThreadMessage, ...]
   */
  @OneToMany(() => ChatMessage, message => message.chat, { cascade: true })
  messages?: ChatMessage[]

  /**
   * @param options The options to use when serializing the flow thread.
   * @returns The serialized representation of the flow thread.
   */
  serialize(options: Options = {}): ChatThreadObject {
    const { withUser, withMessages } = options
    return {
      id: this.id,
      title: this.title,
      description: this.description,
      createdAt: this.createdAt.toUTCString(),
      updatedAt: this.updatedAt.toUTCString(),
      createdBy: withUser ? this.createdBy.serialize() : undefined,
      messages: withMessages ? this.messages?.map(message => message.serialize()) : undefined,
    }
  }
}

interface Options {
  withUser?: boolean
  withMessages?: boolean
}

export interface ChatThreadObject {
  id: UUID
  title: string
  description: string
  createdAt: string
  updatedAt: string
  createdBy?: UserObject
  messages?: ChatMessageObject[]
}
